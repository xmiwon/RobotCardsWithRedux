{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","constants.js","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","console","log","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.07857465.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n            <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img src={`https://robohash.org/${id}?150x150`} alt=\"pic\" />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React  from 'react';\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList = ({robots}) => {\r\nconsole.log('CardList')\r\n    return (\r\n        robots.map((user, i) => {\r\n            return (\r\n                <Card\r\n                    key={i}\r\n                    id={user.id}\r\n                    name={user.name}\r\n                    email={user.email}\r\n                />\r\n            \r\n            )\r\n        })\r\n    )\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    console.log('SearchBox')\r\n    return (\r\n        <div>\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true})\r\n    }\r\n\r\n    render() {\r\n        \r\n            if (this.state.hasError) {\r\n                return <h1>Oops error</h1>\r\n            }\r\n            return this.props.children\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react'\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true;\r\n        } \r\n        return false\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: this.state.count + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton')\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count : {this.state.count}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton","import React, { Component } from 'react'\r\nimport CounterButton from './CounterButton'\r\n\r\nclass Header extends Component {\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n\r\n    render() {\r\n        console.log('Header')\r\n        return (\r\n            <div>\r\n                <h1 className=\"tc\">Robot Cards</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport Header from '../components/Header'\r\n\r\nimport { requestRobots, setSearchField } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase()) \r\n        })\r\n\r\n        return (\r\n            <div className='tc'>\r\n              <Header />\r\n              <SearchBox searchChange={onSearchChange}/>\r\n              <Scroll>\r\n                { isPending ? <h1>Loading</h1> :\r\n                  <ErrorBoundry>\r\n                    <CardList robots={filteredRobots} />\r\n                  </ErrorBoundry>\r\n                }\r\n              </Scroll>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING } from './constants.js'\r\n\r\nexport const setSearchField = (text) => {\r\n    console.log(text)\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING } from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    console.log(action.type)\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n} \r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}